/*
 * Debug_RSP.c
 *
 *  Created on: ??�/??�/????
 *      Author: YUSSRY
 */
/*
 * template.c
 *
 *  Created on: ??�/??�/????
 *      Author: YUSSRY
 */


/*
*********************************************************************************************************
*                                     MICIRUM BOARD SUPPORT PACKAGE
*
*                             (c) Copyright 2012; Micrium, Inc.; Weston, FL
*
*               All rights reserved.  Protected by international copyright laws.
*               Knowledge of the source code may NOT be used to develop a similar product.
*               Please help us continue to provide the Embedded community with the finest
*               software available.  Your honesty is greatly appreciated.
*********************************************************************************************************
*/

/*
*********************************************************************************************************
*
*                                        Debug Remote Serial Protocol (Debug_RSP) module
*
*                                         Xilinx Zynq XC7Z020
*                                               on the
*
*                                             Xilinx ZC702
*                                          Evaluation Board
*
* Filename      : Debug_RSP.c
* Version       : V1.00
* Programmer(s) :
*********************************************************************************************************
*/

/*
*********************************************************************************************************
*                                             INCLUDE FILES
*********************************************************************************************************
*/

#define Debug_RSP_IMPORT
#include "Debug_RSP.h"

/*
*********************************************************************************************************
*                                            LOCAL DEFINES
*********************************************************************************************************
*/


/*
*********************************************************************************************************
*                                           LOCAL CONSTANTS
*********************************************************************************************************
*/


/*
*********************************************************************************************************
*                                          LOCAL DATA TYPES
*********************************************************************************************************
*/
typedef struct _Debug_RSP_Packet
{
	Debug_RDP_header_t header;
	Debug_RSP_trailer_t trailer;
	CPU_INT08U *Payload_ptr;
	CPU_INT08U CheckSum;
}Debug_RSP_Packet;

Debug_RSP_Packet RSP_Packet;
typedef enum {
               Debug_RSP_Memory,
               Debug_RSP_Register,
               Debug_RSP_Exec,
               Debug_RSP_Breakpoint,
               Debug_RSP_Query
 }Debug_RSP_CommandClasses ;

/*
*********************************************************************************************************
*                                            LOCAL TABLES
*********************************************************************************************************
*/


/*
*********************************************************************************************************
*                                       LOCAL GLOBAL VARIABLES
*********************************************************************************************************
*/

#define Debug_RSP_Max_BufferLen  50                          /*Maximum Transmit/Recive buffer Length in ??? */
 //#define Debug_RSP_IN_OUTBUFMax			((NUMREGBYTES << 1) + 10)
#define Debug_RSP_IN_OUTBUFMax			400                  /*Maximumlength of payload Buffer*/


/* Packet buffers hold the Transmitted/Received packet Raw information */
static CPU_INT08U Debug_RSP_SendBuffer[Debug_RSP_Max_BufferLen];
static CPU_INT08U Debug_RSP_ReceiveBuffer[Debug_RSP_Max_BufferLen];

/*Input and Output buffer to hold the DataPayload of an RSP Packet*/
static CPU_INT08U Debug_RSP_Payload_InBuf[Debug_RSP_IN_OUTBUFMax];
static CPU_INT08U Debug_RSP_Payload_OutBuf[Debug_RSP_IN_OUTBUFMax];


static const CPU_INT08U Debug_RSP_Byte2Hex_Lookup[] = "0123456789abcdef";

/*Memory Buffer used for reading/writing memory values*/


/*Register Buffer used for reading/writing memory values*/

/*
*********************************************************************************************************
*                                      LOCAL FUNCTION PROTOTYPES
*********************************************************************************************************
*/
/*asynchronous Receiving*/
static void Debug_RSP_Port_IntHandler(void *packetInfo);
static void Debug_RSP_Register_port_Handler(void);
static void Debug_RSP_InitCmmands_FunctionsList(void);
static void Debug_RSP_Unknown_Packet(void *);
static void Debug_RSP_Acks(void);
static void Debug_RSP_Nacks(void);

/*Helper functions*/
static void Debug_Reg2Hex(void);
static void Debug_Hex2Reg(void);

static CPU_INT08U Debug_Mem2Hex(Debug_addr_t *start_address, Debug_Len_t ByteCount,CPU_INT08U *HexBuffer);
static void Debug_Hex2Mem(CPU_INT08U *HexBuffer,CPU_INT08U *MemByteBuffer, Debug_Len_t ByteCount);
static CPU_INT08U Debug_RSP_Byte2Hex(CPU_INT08U halfbyte);
static CPU_INT08U Debug_RSP_Hex2byte(CPU_INT08U Hex);
static CPU_INT08U Debug_Hex2Word(CPU_INT08U *HexStream, Debug_MemWidth * word);
static void Debug_Word2Hex(Debug_MemWidth * word, CPU_INT08U *HexStream);


/*
*********************************************************************************************************
*                                             REGISTERS
*********************************************************************************************************
*/




/*
*********************************************************************************************************
*                                            REGISTER BITS
*********************************************************************************************************
*/




/*
*********************************************************************************************************
*                                     LOCAL CONFIGURATION ERRORS
*********************************************************************************************************
*/





/*
*********************************************************************************************************
*                                               Debug_RSP_Init()
*
* Description : Initialize Debug_RSP module
*               - call Debug_IO (low-level module) initialize function
*               - RSP module register its own high-level handler to Debug_IO handler
*                 so that it can be called from Debug_IO port-events' handler
*               - initialize command function array to its default handling routine which is Debug_RSP_Unknown_Packet()
*
* Argument(s) : none.
*
* Return(s)   : none.
*
* Caller(s)   : should be Debug_Main Module
*
* Note(s)     : (1)
*
*               (2)
*********************************************************************************************************
*/



void Debug_RSP_Init(void)
 {

	/*Call Debug_IO module initialization function */

	Debug_IO_init(Debug_RSP_Port_IntHandler,Debug_RSP_DefaultNumBytesRxedINT,Debug_RSP_ReceiveBuffer);
	Debug_RSP_InitCmmands_FunctionsList();
	RSP_Packet.header = '$';
	RSP_Packet.trailer = '#';
	RSP_Packet.CheckSum = 0;
	RSP_Packet.Payload_ptr = Debug_RSP_Payload_InBuf;

 }
/*
*********************************************************************************************************
*                                               Debug_RSP_Put_Packet()
*
* Description :This function encapsulate the data payload into RSP Packet format  $packet-data #checksum
*
* Argument(s) : PacketData : main data payload of RSP Packet
*               Command    : RSP command To which this packet is a response
*               this parameter is needed to convert the memory contents or register contents to Hex stream
*
* Return(s)   : none.
*
* Caller(s)   : Debug_Main Module after processing specific command
*
* Note(s)     : (1)gets information from the packet structure RSP_Packet
*
*               (2)
*********************************************************************************************************
*/
 void Debug_RSP_Put_Packet(CPU_INT08U *PacketData, Debug_RSP_Commands Command)
 {

	 CPU_INT08U Char;
     /*Do we need to Flush Transmit buffer first??*/
	 Debug_Port.Debug_Write_char(RSP_Packet.header);
	 RSP_Packet.Payload_ptr = PacketData;
	while(1)
	{
	 Char = RSP_Packet.Payload_ptr;
	 while(Char = *(RSP_Packet.Payload_ptr ++))
		 {
		       Debug_Port.Debug_Write_char(Char);
		       RSP_Packet.CheckSum += Char;

		 }
	 Debug_Port.Debug_Write_char(Debug_RSP_Byte2Hex(RSP_Packet.CheckSum >> 4) & 0xF);   /*Write higher half-byte of checksum*/
	 Debug_Port.Debug_Write_char(Debug_RSP_Byte2Hex(RSP_Packet.CheckSum) & 0xF);
       /*Wait to get Ack*/

	 Char = Debug_Port.Debug_Read_char();

	 if (Char == '+')
		 return;
	 if(Char == '$')  /*What does this mean , GDB Reconnects? as mentioned in RT-Thread Stub*/

	 {

		 /*Nacks this packet*/
		 Debug_RSP_Nacks();
          /*Flush Transmit Buffer as RT-Thread Stub*/
          /*why we do not flush the Receiver too*/


		 return;

		 /*else , retransmit packet !!Why though here i receive unexpected pattern*/
	 }
 }


 }
 /*
 *********************************************************************************************************
 *                                               Debug_RSP_Get_Packet()
 *
 * Description : Get RSP Packet format $<dataPayload>#<CheckSum>
 *               This function de-capsulate information received from debugger from RSP format
 *
 * Argument(s) : none.
 *
 * Return(s)   : none.
 *
 * Caller(s)   : Debug_Main Module
 *
 * Note(s)     : (1) this function uses a blocking sent function to send a full packet
 *
 *               (2)
 *********************************************************************************************************
 */
 void Debug_RSP_Get_Packet(void)
 {


	 //CPU_INT08U *Sinkptr;
       /*Ignore any characters till we get the packet header*/
      CPU_INT08U RxChar;
      CPU_INT08U LocalChecksum = 0;
      CPU_INT08U PacketCheckSum = 0;
      CPU_INT08U Rxcount;


do{
	 /*return after receiving '#'*/
    Debug_Port.Debug_Read_IgnoreTillChar('$');

    /*Now receive the data payload till the packet trailer and calculate the Ckecksum*/

    /*TODO::
    	  *Need check size of receive buffer against received characters count*/

    while((RxChar = Debug_Port.Debug_Read_char()) != '#')
   	 {
            /*Receiving payload*/
   	 Debug_RSP_Payload_InBuf[Rxcount] = RxChar;
   	 LocalChecksum += RxChar;
   	 Rxcount++;
   	 }

    /*Now Get the packet CheckSum*/
    PacketCheckSum  = Debug_RSP_Hex2byte(Debug_Port.Debug_Read_char()) << 4;    /*should be high half-byte of checksum*/
    PacketCheckSum  += Debug_RSP_Hex2byte(Debug_Port.Debug_Read_char());   /*should be Low half-byte of checksum*/


    /*Nack the Packet if Checksums are not equal*/
    if(PacketCheckSum != LocalChecksum)
   	 Debug_RSP_Nacks();
}while(PacketCheckSum != LocalChecksum);/*re-receive <--> ack/Nack Cycle*/

 }

 /*
  *********************************************************************************************************
  *                                               Debug_RSP_Process_Packet()
  *
  * Description : process the incoming packet for received commands and call its handling routine
  *
  * Argument(s) : none.
  *
  * Return(s)   : none.
  *
  * Caller(s)   : not known yet but may be stub task
  *
  * Note(s)     : (1)
  *
  *               (2)
  *********************************************************************************************************
  */

  void Debug_RSP_Process_Packet(void)
  {
	  switch (Debug_RSP_Payload_InBuf[0]) {
	         case '?':/* gdbserial status */
	           //TODO:
	             break;
	         case 'q':/* query command */
	        	 //TODO:
	             break;
	         case 'p':       /* return the value of  a single CPU register */
	         case 'g':       /* return the value of the CPU registers */
	        	 Gdb_Cmd_GetRegs();
	             break;
	         case 'P':       /* set the value of a single CPU registers - return OK */
	         case 'G':       /* set the value of the CPU registers - return OK */
	        	 Gdb_Cmd_SetRegs();
	             break;
	         case 'm': /* mAA..AA,LLLL  Read LLLL bytes at address AA..AA */
	             Gdb_Cmd_MemRead();
	             break;
	         case 'X':/* XAA..AA,LLLL: Write LLLL escaped binary bytes at address AA.AA*/
	        	 Gdb_Cmd_BinWrite();
	             break;
	         case 'M':/* MAA..AA,LLLL: Write LLLL bytes at address AA.AA return OK */
	        	 Gdb_Cmd_MemWrite();
	             break;
	         case 'D': /* Debugger detach */
	         case 'k': /* Debugger detach via kill */
	        	 //TODO:
	             break;
	         case 'C':/* Exception passing */
	             //TODO:
	             break;
	         case 'z':/* Break point remove */
	         case 'Z':/* Break point set */
	        	 //TODO:
	             break;
	         case 'H':/* task related */
	        	 //TODO:
	             break;
	         case 'T':/* Query thread status */
	        	 //TODO:
	             break;
	         case 'b': /* bBB...  Set baud rate to BB... */
	        	 //TODO:
	             break;
	         case 's': /* sAA..AA    step form address AA..AA (optional) */
	         case 'c': /* cAA..AA    Continue at address AA..AA (optional) */
	        	 //TODO:
	             break;
	     }

  }
void Gdb_Cmd_GetRegs()
  {

//region Get Register Value by Register No
	  	       if (Debug_RSP_Payload_InBuf[0] == 'p'){
	  	    	 CPU_INT08U *ptr = &Debug_RSP_Payload_InBuf[1];
	           unsigned long regNo = 0;

	           if (Debug_Hex2Word(ptr, &regNo)){
	              // ToDO : get the value of the regNo --> Nehal.
	               return;
	           } else {
	               strcpy(Debug_RSP_Payload_OutBuf, "INVALID RegNo");
	               return;
	           }
	       }
//endregion

//region Get All Registers Values
	  	       //ToDo: write all Registers Values  --> Nehal.

//endregion



  }

void Gdb_Cmd_SetRegs()
{
	unsigned long		temp_Regs[32];// --> nehal you will define your own Regs array i define the temp_Regs for explain how to use
	//region Set Register Value by Register No
	char len = sizeof(long);
	 if (Debug_RSP_Payload_InBuf[0] == 'P'){
	        char *ptr = &Debug_RSP_Payload_InBuf[1];
	        unsigned long regno = 0;

	        if (Debug_Hex2Word(ptr, &regno) && *ptr++ == '='){

	        	//ToDo:1- Initialize  temp_Regs to zeros -->Nehal
	        	// 	   2- Copy System Regs to temp_Regs.-->Nehal
	            Debug_Hex2Mem(ptr, ((char *)temp_Regs) + regno * len, len);
	            // ToDo: call a function that will take temp_Regs and write it to System Regs.
	            strcpy(Debug_RSP_Payload_OutBuf, "OK");
	        }

	        return;
	    }
		//endregion
	 //region Set all Registers Values
     // TODO: define a max number of register Macro say (32) --> nehal
	 // Size of each Register say size of(long) these for use in the next step -->nehal.
	 	 Debug_Hex2Mem(Debug_RSP_Payload_InBuf[1], (char *)temp_Regs, (32/*Number Regs*/* sizeof(long)/*Number of bytes of each reg*/)/*NumberofBytes Tobe read*/);
        // ToDo: call a function that will take temp_Regs and write it to System Regs.
	    strcpy(Debug_RSP_Payload_OutBuf, "OK");
	    //endregion


}
void Gdb_Cmd_MemRead()
{
	 char *ptr = &Debug_RSP_Payload_InBuf[1];
	    unsigned long length;//length of data to be read
	    unsigned long addr;// start address.
	    int err;

	    if (Debug_Hex2Word(ptr, &addr) > 0 && *ptr++ == ',' &&
	    		Debug_Hex2Word(&ptr, &length) > 0) {
	 //TODO: check data bounders
	        err = Debug_Mem2Hex((char *)addr, Debug_RSP_Payload_OutBuf, length);
	        if (err==DEBUG_ERROR)
	        {
	           //TODO Handel This Error Type;
	        }
	    } else {
	        //TODO: Handel this undefined Error.
	    }
}
 int Write_Data2Mem(int isBinaryData)
{
    char *ptr = &Debug_RSP_Payload_InBuf[1];
    unsigned long addr;
    unsigned long length;
    int err;

    if (Debug_Hex2Word(ptr, &addr) > 0 && *(ptr++) == ',' &&
    		Debug_Hex2Word(ptr, &length) > 0 && *(ptr++) == ':') {
//TODO: Check data bounders by start add and length.
        if (isBinaryData) // for X packet or binary data.
        {

            //TODO:Debug_Bin2Mem();
        }
        else
             Debug_Hex2Mem(ptr, (char *)addr, length);


        return 0;
    }

    return -1;
}
 void Gdb_Cmd_MemWrite()
 {
     int err = Write_Data2Mem(0);

     if (err)
     {//TODO:Handel this Error Type}

     }
     else
     {
         strcpy(Debug_RSP_Payload_OutBuf, "OK");
     }
 }
 void Gdb_Cmd_BinWrite()
 {
	 int err = Write_Data2Mem(1);

	 if (err)
	     {//TODO:Handel this Error Type}

	     }
	     else
	     {
	         strcpy(Debug_RSP_Payload_OutBuf, "OK");
	     }

 }
 /*
 *********************************************************************************************************

*                                               Debug_RSP_Error_Packet()
 *
 * Description : send an Error Packet Format 'E'
 *
 * Argument(s) : PacketData : should be error number.
 *
 * Return(s)   : none.
 *
 * Caller(s)   : Debug_Main Module
 *
 * Note(s)     : (1)
 *
 *               (2)
 *********************************************************************************************************
 */
 void Debug_RSP_Error_Packet(CPU_INT08U *PacketData)
 {
     /*An error has occurred; xx is a two-digit hexadecimal error number ($Exx#CS )*/
 }
 /*
 *********************************************************************************************************
 *                                               Debug_RSP_Console_Packet()
 *
 * Description : sends an 'O' Packet to sends application specific output to debugger that should be displayes  as it is to user
 *
 * Argument(s) : PacketData: should be pointer to message to be printed by GDB Console.
 *
 * Return(s)   : none.
 *
 * Caller(s)   : application print() function that is used across application,kernel,etc
 *
 * Note(s)     : (1)it is used to be able to multiplex a single medium port for transferring both
 *                  Protocol-specific commands and application-specific output
 *
 *               (2)
 *********************************************************************************************************
 */
 void Debug_RSP_Console_Packet(CPU_INT08U *PacketData)
 {

 }
 /*
  *********************************************************************************************************
  *                                               Debug_RSP_OK_Packet()
  *
  * Description : sends an ok Packet
  *
  * Argument(s) : none.
  *
  * Return(s)   : none.
  *
  * Caller(s)   : Debug_Main module
  *
  * Note(s)     : (1)
  *               (2)
  *********************************************************************************************************
  */
 void Debug_RSP_OK_Packet(void)
 {

 }



 /*
 *********************************************************************************************************
 *                                               Debug_RSP_Port_IntHandler()
 *
 * Description :High-level interrupt handler for Debug port events
 *
 * Argument(s) : packetInfo : any information that low-level IO module needs to deliver to RSP module
 *               not formally defined yet but may be pointer to received buffer of data based on specific interrupt
 *
 * Return(s)   : none.
 *
 * Caller(s)   : Debug_IO_PortHandler() via Debug_RSPCallback in Debug_IO_Port structure
 *
 * Note(s)     : (1)
 *
 *               (2)
 *********************************************************************************************************
 */
 static void Debug_RSP_Port_IntHandler(void *packetInfo)
{

}
 /*
 *********************************************************************************************************
 *                                               Debug_RSP_InitCmmands_FunctionsList()
 *
 * Description :Initialize the RSP Commands' Function pointers to their default handling routine which is Debug_RSP_Unknown_Packet
 *
 * Argument(s) : none.
 *
 * Return(s)   : none.
 *
 * Caller(s)   : Debug_RSP_Init()
 *
 * Note(s)     : (1)
 *
 *               (2)
 *********************************************************************************************************
 */

 static void Debug_RSP_InitCmmands_FunctionsList(void)

 {
 	CPU_INT08U CommIndex ;
         for(CommIndex = 0; CommIndex < Debug_RSP_NumCommPackets;CommIndex++ )
              Debug_RSP_Commands_Functions[CommIndex] = Debug_RSP_Unknown_Packet ;
 }

 /*default function for processing unknown/unsupported command*/


 /*
 *********************************************************************************************************
 *                                               Debug_RSP_Unknown_Packet()
 *
 * Description :sends an empty RSP packet in respond to unknown debugger command packet
 *
 * Argument(s) : none.
 *
 * Return(s)   : none.
 *
 * Caller(s)   : Debug_RSP_Process_Packet()
 *
 * Note(s)     : (1)
 *
 *               (2)
 *********************************************************************************************************
 */
 static void Debug_RSP_Unknown_Packet(void *Command_params)
 {
	 /*For any command not supported by the stub, an empty response (�$#00�) should
	 be returned*/


 }

 static void Debug_RSP_Acks(void)
 {

	 Debug_Port.Debug_Write_char('+');
 }
 static void Debug_RSP_Nacks(void)
 {
	 Debug_Port.Debug_Write_char('-');
 }
 /*
 *********************************************************************************************************
 *                                               Debug_RSP_Byte2Hex()
 *
 * Description : convert a 4-bit in byte to its corresponding HEX ASCII character
 *
 * Argument(s) : halfbyte : decimal value between 0 , 15.
 *
 * Return(s)   : Corresponding HEX character
 *
 * Caller(s)   : Debug_RSP_Process_Packet()
 *
 * Note(s)     : (1)Examples : input= 15  output= 'F'  , input = 4  output= '4' input=12  output='C'
 *
 *
 *********************************************************************************************************
 */
 static CPU_INT08U Debug_RSP_Byte2Hex(CPU_INT08U halfbyte)
 {
	 /*TODO::
	  * Should we assure that halfbyte Value < 16 decimal*/
	 if(halfbyte <= 0xF)
		 return Debug_RSP_Byte2Hex_Lookup[halfbyte];
	 else
		 return DEBUG_ERROR;

 }

 /*
 *********************************************************************************************************
 *                                               Debug_RSP_Hex2byte()
 *
 * Description : Convert HEX ASCII character to its corresponding  4-bit decimal value
 *
 * Argument(s) : hexbyte : decimal value between 0 , 15.
 *
 * Return(s)   : Corresponding decimal value between 0 , 15
 *               DEBUG_ERROR if got invalid HEX character
 *
 * Caller(s)   : Debug_RSP_Process_Packet()
 *
 * Note(s)     : (1)Examples : input= 'F'|'f'  output= 15  , input = '4'  output= 4 input='C'|'c'  output=12
 *
 *
 *********************************************************************************************************
 */
 static CPU_INT08U Debug_RSP_Hex2byte(CPU_INT08U hexbyte)
  {
	 if(hexbyte >= 'A' && hexbyte <= 'F')
		 return hexbyte - 'A'/*get the offset from ASCII*/ + 10 ;   /*10 is for the offset of literal hexs(a-f/A-F) in Debug_RSP_Byte2Hex_Lookup[]*/
	 else if(hexbyte >= 'a' && hexbyte <= 'f')
	 		 return hexbyte - 'a' + 10 ;
	 else if(hexbyte >= '0' && hexbyte <= '9')
	 		 return hexbyte - '0'/*get the offset from ASCII*/ ;
	 else   /* any other ASCII code is INVALID in RSP*/
		  return DEBUG_ERROR;
  }

 /*
 *********************************************************************************************************
 *                                               Debug_Mem2Hex()
 *
 * Description :This function converts a memory range words into a HexChar-series buffer
 *
 * Argument(s) : start_address  : start address of memory range to be converted
 *               ByteCount      : Number of memory bytes to be converted
 *               HexBuffer      : pointer to buffer to store the converted Hex characters stream
 *
 *
 * Return(s)   : DEBUG_SUCCESS  if no error
 *               DEBUG_ERROR    if  ByteCount exceeds HexBuffer size or encounter invalid hex character
 *
 *
 *
 * Caller(s)   : Debug_RSP_Process_Packet()
 *
 * Note(s)     : (1)HexBuffer pointer will not be advanced by ByteCount
 *
 *Example usage:  if  we are handling m packet , addr and len is the start address and length we parsed from packet fields, then
 *
 *  Debug_Mem2Hex(addr, len, &Debug_RSP_Payload_OutBuf[currentptr])
 *
 *   loads the output buffer with Hex characters converted from memory range addr to addr+len
 *    ------------------------------------------------------------------------
 *    |     |        |         |         |        |        |        |        |
 *    |  0  |    1   |    2    |    3    |   4    |   5    |   .... |    m   |   ]--->m bytes of memory
 *    ------------------------------------------------------------------------
 *    <-Lowest byte->                                       <-Highest-byte->
 *
 *    -----------------------------------------------------------------------------------------------
 *    |       |         |           |         |            |        |         |        |        |
 *    |  0    |     1   |     2     |    3    |      4     |   5    |    ...  |    n-1 |    n   |   ]---> n converted hex characters  n = m*2
 *    ----------------------------------------------------------------------------------------------
 *     0-HHB    0-LHB     1-HHB        1-LHB     2-HHB        2-LHB                m-HHB    m-LHB
 *     <-Lowest byte->                                                         <-Highest-byte->
 *
 *  HHB = High Half Byte
 *  LHB = Low Half Byte
 *
 *********************************************************************************************************
 */
static CPU_INT08U Debug_Mem2Hex(Debug_addr_t *start_address, Debug_Len_t ByteCount,CPU_INT08U *HexBuffer)
 {
	/*use byte by byte access*/
	CPU_INT08U *MemBytePtr = (CPU_INT08U *) start_address ;
	CPU_INT08U Count = 0;
	CPU_INT08U HexChar =0 ;

	/*TODO::
	 * need to check the limits of the hex buffer
	 * */
	while( Count < ByteCount)
	        {
	        	     if( (HexChar = Debug_RSP_Byte2Hex((*(MemBytePtr)  >> 4) & 0xF) ) == DEBUG_ERROR )       /*convert High Half byte*/
	        	        break ;

	        	     *(HexBuffer++) = HexChar;

	        	     if( (HexChar = Debug_RSP_Byte2Hex(*(MemBytePtr++) & 0xF) ) == DEBUG_ERROR)             /*convert Low Half byte */
                          break;

	        	     *(HexBuffer++) =	 HexChar;
	                	 Count ++ ;
	        }
	        if(Count == ByteCount)
	        	return DEBUG_SUCCESS;
    return DEBUG_ERROR ;

 }
/*
*********************************************************************************************************
*                                               Debug_Hex2Mem()
*
* Description :This function converts a  HexChar-series buffer into memory buffer of BYTES
*
* Argument(s) : HexBuffer          : pointer to buffer to get Hex character stream from
*               MemByteBuffer      : Temp storage used to store the memory BYTES converted
*
*               ByteCount          : number of Hex characters/bytes in HexBuffer
*
*
* Return(s)   : none
*
*
* Caller(s)   : Debug_RSP_Process_Packet()
*
* Note(s)     : (1)MemByteBuffer will be used by caller to store them in target memory
*
*Example usage:  if  we are handling M packet ,len is the length field in packet and Temp_membuf is a temporary memory buffer
*
*                and ptr is pointer to Debug_RSP_Payload_InBuf[currentptr] then
*
*  Debug_Hex2Mem(ptr, Temp_membuf, len)
*
*   loads the Temp_membuf with words converted from hex stream in Debug_RSP_Payload_InBuf
*    ------------------------------------------------------------------------
 *    |     |        |         |         |        |        |        |        |
 *    |  0  |    1   |    2    |    3    |   4    |   5    |   .... |    n   |   ]---> n hex characters seen as one n/2 bytes
 *    ------------------------------------------------------------------------
 *    <-Lowest byte->                                       <-Highest-byte->
 *
 *
 *
 *    ------------------------------------
 *    |                 |                |
 *    |       0         |      1         |  ]---> two hex characters seen as one byte
 *    ------------------------------------
 *    <-high half-byte-> <-low half-byte->
*********************************************************************************************************
*/
 static void Debug_Hex2Mem(CPU_INT08U *HexBuffer,CPU_INT08U *MemByteBuffer, Debug_Len_t ByteCount)
 {
	 //CPU_INT08U BytePtr = (CPU_INT08U *)MemBuffer;
	 CPU_INT08U Count    = 0;
	 CPU_INT08U Byte     =  0;
    /*we can either choose a temp storage for Words/bytes converted
     * or
     * use the passed HexBuffer as a temp storage as it will not be after calling this function*/
	 CPU_INT08U TempMemBuff [ByteCount];

	 while(Count < ByteCount)
	 {
		 /*TODO::
		  * Do we need to check for INVALID HEX char to be converted to -1*/
		 Byte                       = Debug_RSP_Hex2byte(*(HexBuffer++)) << 4;                /*High HalfByte*/
		 Byte                      |= Debug_RSP_Hex2byte(*(HexBuffer++)) ;                   /*Low Half byte*/
		 *(MemByteBuffer)   = Byte ;
		 MemByteBuffer ++;

				 Count++ ;


	 }
 }

 /*
*********************************************************************************************************
*                                               Debug_Hex2Word()
*
* Description :This function converts a HexChar-stream into single word
*
* Argument(s) : HexStream    : pointer to  Hex characters stream
*               Word         : pointer to converted  Word
*
*
* Return(s)   : Number of Bytes converted
*
*
* Caller(s)   : Debug_RSP_Process_Packet()
*
* Note(s)     : (1)
*
*Example usage:  if  we are handling p packet ,we need to get the value of Register number from hex stream in input buffer ,
*
*     if ptr is pointer to Debug_RSP_Payload_InBuf[currentptr],then
*   Debug_Hex2Word(ptr, &wosrd)
*   parse the register number and put into word variable
*
*   if hex stream is " "  word =      --> to be calculated
*    ------------------------------------------------------------------------
*    |     |        |         |         |        |        |        |        |
*    |  0  |    1   |    2    |    3    |   4    |   5    |   6    |    7   |   ]---> 8 hex characters seen as one word(4-bytes)
*    ------------------------------------------------------------------------
*    <-highest byte->                                       <-lowest-byte->
*
*
*
*    ------------------------------------
*    |                 |                |
*    |       0         |      1         |  ]---> two hex characters seen as one byte
*    ------------------------------------
*    <-high half-byte-> <-low half-byte->
*********************************************************************************************************
*/
static CPU_INT08U  Debug_Hex2Word(CPU_INT08U *HexStream, Debug_MemWidth * word)
{


	 CPU_INT08U **Hexptr = &HexStream ;
		 *word = 0;
		 CPU_INT32U uword =0;
		 CPU_INT08U signflag = 0;
		 CPU_INT08U byte,HalfByte;
		 CPU_INT08U bytecount = 0;
		 //loop as long as there's hex
		 	 if(**Hexptr == '-')
		 	 {  signflag = 1;
		 	    (*Hexptr)++;
		 	 }
		 	while(**Hexptr)   /*while there is hex chars parse them byte-by-byte and put them in word  TODO:: ensure this is valid for all fields that use this function*/
		 		 {
		 		 /*parse  byte byte*/
		 		/*TODO::
		 		 * check if the hex character is valid :not(G,H,I,J,K,L,..)*/
		 		if ((HalfByte  = Debug_RSP_Hex2byte(**Hexptr)) == DEBUG_ERROR) /*invalid HEX*/
		 					{
		 			           // Ahmed: Commented the following line as i need the current Invalid hex Number like ',' or ':'
		 			           //(*Hexptr)--;   /*to let invalid HEX be re-parsed by caller*/
		 			           break ;
		 					}
		 			(*Hexptr)++;
		 			uword = uword << 4 | HalfByte;
		 			bytecount ++;
		 		 }

	      if(signflag)
	    	  *word = -((Debug_MemWidth)uword);   /*Should be tested*/
	      else
	    	  *word = uword;
return bytecount;
}
 /*
 *********************************************************************************************************
 *                                               Debug_Word2Hex()
 *
 * Description :This function converts a single word into HexChar-stream
 *
 * Argument(s) : Word         : pointer to Word to be converted
 *               HexStream    : pointer to converted Hex character stream
 *
 *
 *
 * Return(s)   : none
 *
 *
 * Caller(s)   : Debug_RSP_Process_Packet()
 *
 * Note(s)     : (1)
 *
 *Example usage:  if  we are handling P packet , we need to convert the register value into hex and send it in out buffer
 *                and if ptr is pointer to Debug_RSP_Payload_OutBuf[currentptr], then
 *                Debug_Hex2Word(&word,ptr)
 *                convert register value into Hex and put into Debug_RSP_Payload_OutBuf
 *    if  word =  , hex stream is " "  --> to be calculated
 *
 *    ------------------------------------
 *    |     |        |         |         |
 *    |  0  |    1   |    2    |    3    |   ]---> 4 byte word
 *    ------------------------------------
 *
 *
 *    ------------------------------------------------------------------------
 *    |     |        |         |         |        |        |        |        |
 *    |  0  |    1   |    2    |    3    |   4    |   5    |   6    |    7   |   ]---> 8 hex characters seen as one word(4-bytes)
 *    ------------------------------------------------------------------------
 *     3-HHB   3-LHB    2-HHB     2-LHB     1-HHB    1-LHB   0-HHB     0-LHB
 *    <-highest byte->                                       <-lowest-byte->

 *    HHB = high half-byte
 *    LHB = low half-byte
 *
 *
 *********************************************************************************************************
 */
 static void Debug_Word2Hex(Debug_MemWidth * word, CPU_INT08U *HexStream)
 {
	 /*this functinos will not be used now*/
    /*cast to character pointer to parse memory byte-by-byte*/

	 CPU_INT08U *byteptr = (CPU_INT08U *)word;
     CPU_INT08U **HEXPtr = &HexStream;
	 CPU_INT08U count = 0;
	 while(count < sizeof(Debug_MemWidth))/*one time loop parse one byte */
	 {
         *(*HEXPtr++) = Debug_RSP_Byte2Hex(((*byteptr) >> 4) & 0xf);    /*convert high halfbyte first*/
         *(*HEXPtr++) = Debug_RSP_Byte2Hex((*byteptr) & 0xf);           /*convert low halfbyte */
         count++;
	 }
 }

/* void RSP_Hex_test()
  {



	    //Debug_Hex2Mem(CPU_INT08U *HexBuffer,CPU_INT08U *MemByteBuffer, Debug_Len_t ByteCount);

	 CPU_INT08U hexchar = Debug_RSP_Byte2Hex(-1 );
	 hexchar = Debug_RSP_Byte2Hex(255 );
	 hexchar = Debug_RSP_Byte2Hex(14 );
	 hexchar = Debug_RSP_Byte2Hex(5 );
	 hexchar = Debug_RSP_Byte2Hex(9 );
	 hexchar = Debug_RSP_Byte2Hex(10);

	 CPU_INT08U Halfbyte;
	 Halfbyte =  Debug_RSP_Hex2byte('A');
	 Halfbyte =  Debug_RSP_Hex2byte('a');
	 Halfbyte =  Debug_RSP_Hex2byte('F');
	 Halfbyte =  Debug_RSP_Hex2byte('f');
	 Halfbyte =  Debug_RSP_Hex2byte('1');
	 Halfbyte =  Debug_RSP_Hex2byte('0');
	 Halfbyte =  Debug_RSP_Hex2byte('G');
	 Halfbyte =  Debug_RSP_Hex2byte('$');
	 Note   Debug_RSP_Byte2Hex()&Debug_RSP_Hex2byte() should return COU_INT08S to able to return -1 as error code

	 CPU_INT08U HEXBuf[]={'A','B','c','f','5','8','9','0','4','5','9','a','D','C','6','7'};
	 CPU_INT08U ByteBuf[4]={50};
	 Debug_MemWidth word = 0x70348E90;
	 //Debug_Hex2Word(CPU_INT08U **HexStream, Debug_MemWidth * word);
	 //Debug_Hex2Word(HEXBuf, &word);
	 //Debug_Hex2Word(&HEXBuf, &word);
	 Debug_Word2Hex(&word , HEXBuf);
	 Testing Words (4-byte)

	  Debug_Mem2Hex(&word, 4,HEXBuf);

	  Debug_MemWidth *wordptr = &word;

	  word = 0;

	  Debug_Hex2Mem(HEXBuf,(CPU_INT08U *)wordptr,4);

	  Testing Double word (8-bytes)

	  CPU_INT64U dword = 0x70348E905984fd1c;

	  Debug_Mem2Hex(&dword, 8,HEXBuf);

	  CPU_INT64U *dwordptr = & dword;

	  dword = 0;

	  Debug_Hex2Mem(HEXBuf,(CPU_INT08U *)dwordptr,8);

	 Testing array of words
	  CPU_INT32U registers [4] = {0x70348E90, 0x753DfBca,0x70348E90,0x2004A06c};

	 CPU_INT32U * arrptr = registers;
	  CPU_INT08U regHExBuffer[32]= {0x0};

	  Debug_Mem2Hex(registers, 4*sizeof(CPU_INT32U),regHExBuffer);

	  registers[0] = 0x0;
	  registers[1] = 0x0;
	  registers[2] = 0x0;
	  registers[3] = 0x0;

	  Debug_Hex2Mem(regHExBuffer,(CPU_INT08U *)arrptr,4*(sizeof(CPU_INT32U)));


	  	  Testing Double word (8-bytes)





  }*/
